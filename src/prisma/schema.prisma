generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  username         String    @unique
  password         String
  name             String
  image            String
  phone            String?
  addressUser      String[]  @default([])
  role             Role      @default(USER)
  active           Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  payments         Payment[]
  cart             Cart?
  articles         Article[] // Relation with user's articles
  orders           Order[] // Relation with user's orders
  verificationCode String?

  suggested        Suggested? // Relation with model Suggested
}

model Suggested {
  id                  Int         @id @default(autoincrement())
  userId              Int         @unique
  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  articlesSuggested   Article[]   @relation("ArticlesSuggested")
  productsSuggested   Product[]   @relation("ProductsSuggested")
}

model Article {
  id          Int            @id @default(autoincrement())
  title       String
  summary     String
  coverImage  String
  status      Status_Article @default(DRAFT)
  url         String         @unique
  authorId    Int // Relation with author
  author      User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categoryId  Int // Relation with category
  category    Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  scheduledAt DateTime? // Programable date
  content     String?        @default("")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  suggestedBy Suggested[]   @relation("ArticlesSuggested") 
}

model Product {
  id            Int            @id @default(autoincrement())
  name          String
  image         String         @default("default.jpg")
  imageGallery  String[]       // Image gallery
  regularPrice  Float          @default(0)
  offerPrice    Float?
  status        Status_Product @default(ACTIVE)
  categoryId    Int?
  category      Category?      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  scheduledAt   DateTime? //Programable date
  stock         Int            @default(0)
  attributes    Json           @default("{}")
  productType   ProductType    @default(PHYSICAL)
  description   String?        @default("")
  content       String?        @default("")
  cartProducts  CartProduct[] // Relation with CartProduct
  orderProducts OrderProduct[] // Relation with OrderProduct
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  suggestedBy   Suggested[]    @relation("ProductsSuggested")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  articles Article[] // Relation with articles
  products Product[] // Relation with products
}

model Cart {
  id        Int           @id @default(autoincrement())
  userId    Int           @unique
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  products  CartProduct[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model CartProduct {
  id        Int     @id @default(autoincrement())
  cartId    Int
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int

  @@unique([cartId, productId])
}

model Order {
  id           Int           @id @default(autoincrement())
  userId       Int // Relation with user
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  buyerId      Int // Relation with buyer(Buyer can be different to user)
  buyer        Buyer         @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  status       Status_Order  @default(PENDING) // Order state
  totalAmount  Float // Total de la orden
  payment      Payment? // Relation with the payment
  paymentType  Payment_Order @default(DEBIT_CARD) // Type of payment 
  addressOrder String? // Delivery address

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderProducts OrderProduct[] // Relation with OrderProduct
}

model Buyer {
  id           Int     @id @default(autoincrement())
  name         String
  email        String? // Email buyer
  addressBuyer String? // Buyer's address
  phoneNumber  String? // Buyer's phone
  companyName  String?
  country      String?
  city         String?
  zipCode      String?
  notes        String?

  orders Order[] // Relation with the order
}

model Payment {
  id           Int      @id @default(autoincrement())
  stripeId     String?  @unique
  amount       Float?
  amountCrypto String?
  currency     String?
  createdAt    DateTime @default(now())
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  transactionHash String?
  addressPayment  String?
  status          String?
  confirmations   Int?

  orderId Int   @unique // Relation with the order
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model OrderProduct {
  orderId   Int
  productId Int
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([orderId, productId])
}

model Image {
  id        Int      @id @default(autoincrement())
  filename  String
  filepath  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
}

enum ProductType {
  PHYSICAL
  NONPHYSICAL
}

enum Status_Order {
  PENDING
  COMPLETED
  CANCELLED
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

enum Status_Article {
  PUBLISHED
  DRAFT
}

enum Status_Product {
  ACTIVE
  DISABLED
}

enum Payment_Order {
  CREDIT_CARD
  DEBIT_CARD
  CRYPTO
}
